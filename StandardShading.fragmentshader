#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Output data
out vec3 color;

// Values that stay constant for the whole mesh
uniform sampler2D myTextureSampler;
uniform vec3 LightPosition_worldspace;
uniform bool specularDiffuseOn;

void main(){

    // Light emission properties
    vec3 LightColor = vec3(1,1,1);
    float LightPower = 50.0f;

    // Material properties
    vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
    vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

    // Distance to the light
    float distance = length( LightDirection_cameraspace );

    // Normalization of vectors
    vec3 n = normalize( Normal_cameraspace );
    vec3 l = normalize( LightDirection_cameraspace );
    float cosTheta = clamp( dot( n, l ), 0,1 );

    vec3 E = normalize(EyeDirection_cameraspace);
    vec3 R = reflect(-l,n);
    float cosAlpha = clamp( dot( E, R ), 0,1 );

    // Ambient component
    vec3 ambient = MaterialAmbientColor;

    // Diffuse and specular components
    vec3 diffuse = vec3(0.0);
    vec3 specular = vec3(0.0);

    if (specularDiffuseOn) {
        // Diffuse component
        diffuse = MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance);
        // Specular component
        specular = MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance * distance);
    }

    color = ambient + diffuse + specular;
}

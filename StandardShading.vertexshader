#version 330 core

// Input vertex data, different for all executions of this shader
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data; will be interpolated for each fragment
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh
uniform mat4 MVP;                   // Model-View-Projection matrix
uniform mat4 V;                     // View matrix
uniform mat4 M;                     // Model matrix
uniform vec3 LightPosition_worldspace;  // Light position in world space

void main() {
    // Output position of the vertex in clip space: MVP * position
    gl_Position = MVP * vec4(vertexPosition_modelspace, 1);

    // Position of the vertex in world space: M * position
    Position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;

    // Vertex position in camera space (V * M * vertex position)
    vec3 vertexPosition_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;

    // Eye direction in camera space (camera at the origin)
    EyeDirection_cameraspace = vec3(0, 0, 0) - vertexPosition_cameraspace;

    // Light position in camera space (view matrix applied to light position)
    vec3 LightPosition_cameraspace = (V * vec4(LightPosition_worldspace, 1)).xyz;

    // Light direction in camera space (from the vertex to the light)
    LightDirection_cameraspace = LightPosition_cameraspace - vertexPosition_cameraspace;

    // Normal in camera space (transformed by the view and model matrices)
    Normal_cameraspace = normalize((V * M * vec4(vertexNormal_modelspace, 0)).xyz);

    // Pass the UV coordinates to the fragment shader
    UV = vertexUV;
}
